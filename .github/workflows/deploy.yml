name: Release and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release_and_deploy:
    name: Release and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm exec semantic-release
          echo "new_release_published=$(pnpm exec semantic-release-cli view)" >> $GITHUB_OUTPUT
          echo "new_release_version=$(pnpm exec semantic-release-cli view | grep -oP '(?<=The next release version is )\d+\.\d+\.\d+')" >> $GITHUB_OUTPUT

      - name: Build
        if: steps.semantic.outputs.new_release_published == 'true'
        run: pnpm build

      - name: Deploy to Coolify
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"force": true}' \
            "${{ secrets.COOLIFY_WEBHOOK_URL }}"
        env:
          COOLIFY_WEBHOOK_URL: ${{ secrets.COOLIFY_WEBHOOK_URL }}
          COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
